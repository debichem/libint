cmake_minimum_required(VERSION 3.8)
cmake_policy(SET CMP0074 NEW)
project(library
        LANGUAGES CXX)

set(library_AUTHORS      "Edward F. Valeev")
set(library_DESCRIPTION  "High-performance library for computing Gaussian integrals in quantum mechanics")
set(library_URL          "https://github.com/evaleev/libint")
set(library_LICENSE      "LGPL-3.0")

list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules)

################################### Overview ###################################

# * high MAX_AM generating >20k files may require `ulimit -s 65535` for linking
#   library target on Linux to avert "ld: Argument list too long"
# * when building for packaging, absense or presence of Boost determines whether
#   libint2/boost headers are installed or not

################################### Options ####################################
include(options)
include(int_computed)


#  <<<  General  >>>

option_with_default(CMAKE_BUILD_TYPE "Build type" Release)
option_with_print(BUILD_SHARED "Build at least shared library" OFF)
option_with_print(BUILD_STATIC "Build at least static library (see BUILD_FPIC)" ON)
option_with_print(ENABLE_CXX11API "Build C++11 API in addition to basic library (requires Eigen)" ON)
option_with_print(ENABLE_FORTRAN "Build Fortran03+ Libint interface (requires Fortran)" OFF)
option_with_print(BUILD_TESTING "Compile the testing infrastructure" ON)

if(NOT ENABLE_CXX11API)
    message(FATAL_ERROR "The plain library withough C++11 API is not hooked into this pure-CMake Libint2 buildsystem. For immediate use, switch to the original Libtool+CMake buildsystem. For help expanding this buildsystem to the plain library, raise an issue on GitHub and ping @loriab.")
endif()

if(ENABLE_FORTRAN)
    message(FATAL_ERROR "The Fortran interface is not hooked into this pure-CMake Libint2 buildsystem. For immediate use, switch to the original Libtool+CMake buildsystem. For help expanding this buildsystem to the Fortran interface, raise an issue on GitHub and ping @loriab.")
endif()

#  <<<  Ordering Conventions  >>>

option_with_default(LIBINT2_SHGAUSS_ORDERING
  "Ordering for shells of solid harmonic Gaussians:
    standard -- standard ordering (-l, -l+1 ... l)
    gaussian -- the Gaussian ordering (0, 1, -1, 2, -2, ... l, -l)" standard)

set(LIBINT2_CARTGAUSS_ORDERING ${LIBINT2_CARTGAUSS_ORDERING})
message(STATUS "Setting option LIBINT2_CARTGAUSS_ORDERING: ${LIBINT2_CARTGAUSS_ORDERING} (read-only from generation-time)")

set(LIBINT2_SHELL_SET ${LIBINT2_SHELL_SET})
message(STATUS "Setting option LIBINT2_SHELL_SET: ${LIBINT2_SHELL_SET} (read-only from generation-time)")

#  <<<  Miscellaneous  >>>

option_with_flags(ENABLE_XHOST "Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)" ON
                  "-xHost" "-march=native" "/arch:AVX2")
option_with_default(BUILD_FPIC "Compile lone static library with position independent code (all libraries are fpic when BUILD_SHARED=ON)" OFF)
option_with_default(CMAKE_INSTALL_LIBDIR "Directory to which libraries installed" lib)

######################## Process & Validate Options ###########################
include(autocmake_safeguards)
include(CheckFunctionExists)
include(int_orderings)

check_function_exists(posix_memalign HAVE_POSIX_MEMALIGN)
if (HAVE_POSIX_MEMALIGN)
    set(LIBINT2_ALIGN_SIZE "0" CACHE STRING "(EXPERT) if posix_memalign is available, this will specify alignment of Libint data, in units of sizeof(LIBINT2_REALTYPE). Default is to use built-in heuristics")
endif()
if (MSVC)
    set(HAVE_POSIX_MEMALIGN 1)  # aliased it
    set(LIBINT2_ALIGN_SIZE "0" CACHE STRING "(LAB) I so don't understand the option handling of ALIGN_SIZE")
endif()

if (NOT LIBINT2_REALTYPE)
    set(LIBINT2_REALTYPE double)
endif()

## C++11 required for now. enforced in targets
#set(LIBINT_HAS_CXX11 1)
#set(LIBINT_USE_TYPE_TRAITS 1)
#set(LIBINT_USE_MEMORY 1)
#set(LIBINT_USE_ARRAY 1)
#set(LIBINT_HAS_STD_TYPE_TRAITS 1)
#set(LIBINT_HAS_STD_SHARED_PTR 1)
#set(LIBINT_HAS_STD_MAKE_SHARED 1)
#set(LIBINT_HAS_STD_ARRAY 1)
#set(LIBINT_ARRAY_HAS_FILL 1)

# req'd for now (no FindGMP.cmake, though one at Elemental project)
find_package(MPFR REQUIRED)
if (TARGET MPFR::MPFRXX)
    set(LIBINT_HAS_MPFR 1)
endif()

find_package(Boost 1.57)
if (TARGET Boost::boost)  # the header-only target. when CMake min reaches v3.15, can switch out for Boost::headers
    set(LIBINT_HAS_SYSTEM_BOOST_PREPROCESSOR_VARIADICS 1)
else()
    set(LIBINT_HAS_SYSTEM_BOOST_PREPROCESSOR_VARIADICS 0)

    file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/include/libint2)
    execute_process(
            COMMAND ${CMAKE_COMMAND} -E tar xzf ${PROJECT_SOURCE_DIR}/external/boost.tar.gz
            WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/include/libint2
            RESULT_VARIABLE UNPACK_BOOST_RESULT
            OUTPUT_VARIABLE UNPACK_BOOST_OUTPUT
            ERROR_VARIABLE UNPACK_BOOST_OUTPUT
    )
    message(STATUS "Unpacking bundled Boost")
    if (NOT UNPACK_BOOST_RESULT EQUAL 0)
        message(FATAL_ERROR "Failed to unpack the bundled Boost! The tar command output:\n${UNPACK_BOOST_OUTPUT}")
    endif()

endif()

find_package(Eigen3 REQUIRED)
if (TARGET Eigen3::Eigen)
    set(LIBINT_HAS_EIGEN 1)
endif()

# Python is optional, unless ...
if (ENABLE_FORTRAN)  # ... need fortran
    find_package(PythonInterp REQUIRED)
else(ENABLE_FORTRAN)
    find_package(PythonInterp)
endif(ENABLE_FORTRAN)

################################# Main Project #################################
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

set(NS Libint2)
set(PN ${PROJECT_NAME})

# Set install paths ====================================================================================================

set(LIBINT2_INSTALL_BINDIR "bin"
        CACHE PATH "LIBINT2 binary install directory")
set(LIBINT2_INSTALL_INCLUDEDIR "include"
        CACHE PATH "LIBINT2 INCLUDE install directory")
set(LIBINT2_INSTALL_LIBDIR "lib"
        CACHE PATH "LIBINT2 LIB install directory")
set(LIBINT2_INSTALL_DATADIR "share/libint/${LIBINT_VERSION}"
        CACHE PATH "LIBINT2 DATA install directory")
set(LIBINT2_INSTALL_DOCDIR "share/libint/${LIBINT_VERSION}/doc"
        CACHE PATH "LIBINT2 DOC install directory")
set(LIBINT2_INSTALL_CMAKEDIR "lib/cmake/libint2"
        CACHE PATH "LIBINT2 CMAKE install directory")

# <<<  Build  >>>

if(MSVC)
    # MSVC does not include <cmath> constants, unless _USE_MATH_DEFINES is defined.
    add_definitions("/D_USE_MATH_DEFINES")
    # Set the exception handling model
    add_definitions("/EHsc")
endif()

configure_file(include/libint2/config2.h.cmake.in include/libint2/config2.h @ONLY)

include(srclist.cmake)
message(STATUS "LIBINT2_LIBRARY_CXX_SRC=${LIBINT2_LIBRARY_CXX_SRC}")

add_library(int-obj OBJECT "${LIBINT2_LIBRARY_CXX_SRC}")

target_compile_definitions(int-obj PRIVATE -D__COMPILING_LIBINT2=1)
target_compile_features(int-obj PRIVATE "cxx_std_11")

target_include_directories(int-obj PRIVATE ${PROJECT_BINARY_DIR}/include/
                                           ${PROJECT_SOURCE_DIR}/src/
                                           ${PROJECT_SOURCE_DIR}/include/
                                           ${PROJECT_SOURCE_DIR}/include/libint2/
                                           $<TARGET_PROPERTY:MPFR::GMPXX,INTERFACE_INCLUDE_DIRECTORIES>)

if (BUILD_SHARED OR BUILD_FPIC)
    set_target_properties(int-obj PROPERTIES POSITION_INDEPENDENT_CODE 1)
endif()

if (MSVC)
    # Increase stack size from 1 MB to 4 MB
    set_target_properties(int-obj PROPERTIES LINK_FLAGS "/STACK:4194304")
endif()

get_filename_component(DATADIR_ABSOLUTE "${CMAKE_INSTALL_PREFIX}/${LIBINT2_INSTALL_DATADIR}" ABSOLUTE)
if (BUILD_SHARED)
    add_library           (int-shared SHARED  $<TARGET_OBJECTS:int-obj>)
    target_link_libraries (int-shared INTERFACE Eigen3::Eigen)
    set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}
                                                 MACOSX_RPATH ON
                                                 OUTPUT_NAME "int2"
                                                 EXPORT_NAME "cxx")
    target_include_directories(int-shared INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
    target_compile_features(int-shared INTERFACE "cxx_std_11")
    target_compile_definitions(int-shared INTERFACE
          $<BUILD_INTERFACE:SRCDATADIR="${PROJECT_SOURCE_DIR}/lib/basis">
          $<INSTALL_INTERFACE:DATADIR="${DATADIR_ABSOLUTE}">)
endif()

if (BUILD_STATIC)
    add_library           (int-static STATIC  $<TARGET_OBJECTS:int-obj>)
    target_link_libraries (int-static INTERFACE Eigen3::Eigen)
    set_target_properties (int-static PROPERTIES OUTPUT_NAME "int2"
                                                 EXPORT_NAME "cxx")
    target_include_directories(int-static INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
    target_compile_features(int-static INTERFACE "cxx_std_11")
    target_compile_definitions(int-static INTERFACE
          $<BUILD_INTERFACE:SRCDATADIR="${PROJECT_SOURCE_DIR}/lib/basis">
          $<INSTALL_INTERFACE:DATADIR="${DATADIR_ABSOLUTE}">)
endif()

if (BUILD_SHARED)
    add_library (int-library ALIAS int-shared)
elseif (BUILD_STATIC)
    add_library (int-library ALIAS int-static)
endif()

# <<<  Install  >>>

install(DIRECTORY ${PROJECT_BINARY_DIR}/include/
                  ${PROJECT_SOURCE_DIR}/include/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
        FILES_MATCHING PATTERN "*.h"
                       PATTERN "*.hpp")

install(FILES ${PROJECT_SOURCE_DIR}/src/libint2_iface.h
              ${PROJECT_SOURCE_DIR}/src/libint2_iface_internal.h
              ${PROJECT_SOURCE_DIR}/src/libint2_params.h
              ${PROJECT_SOURCE_DIR}/src/libint2_types.h
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/libint2)

#target_include_directories(int-obj PRIVATE ${PROJECT_BINARY_DIR})

if (BUILD_SHARED)
    install (TARGETS int-shared
             EXPORT "${NS}Targets-shared"
             LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if (BUILD_STATIC)
    install (TARGETS int-static
             EXPORT "${NS}Targets-static"
             ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif()

if (BUILD_TESTING)
    enable_testing(true)
    add_subdirectory(tests)
endif()

# <<<  Export Config  >>>

# GNUInstallDirs "DATADIR" wrong here; CMake search path wants "share".
set(CMAKECONFIG_INSTALL_DIR "share/cmake/${NS}")
configure_package_config_file(cmake/${NS}Config.cmake.in
                              "${CMAKE_CURRENT_BINARY_DIR}/${NS}Config.cmake"
                              INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR})
write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${NS}ConfigVersion.cmake
                                 VERSION ${${NS}_VERSION}
                                 COMPATIBILITY SameMajorVersion)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${NS}Config.cmake
              ${CMAKE_CURRENT_BINARY_DIR}/${NS}ConfigVersion.cmake
        DESTINATION ${CMAKECONFIG_INSTALL_DIR})

configure_file(cmake/libint2.pc.cmake.in libint2.pc @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libint2.pc
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig/)

if (BUILD_SHARED)
    install(EXPORT "${NS}Targets-shared"
                   NAMESPACE "${NS}::"
                   DESTINATION ${CMAKECONFIG_INSTALL_DIR})
endif()

if (BUILD_STATIC)
    install(EXPORT "${NS}Targets-static"
                   NAMESPACE "${NS}::"
                   DESTINATION ${CMAKECONFIG_INSTALL_DIR})
endif()
